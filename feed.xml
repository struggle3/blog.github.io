<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>ye程序员</title>
		<description>我是一名普通的80后程序员一直从事.net平台技术栈的web开发工作，一个忠实的微软粉爱生活、爱代码、爱技术喜欢研究开源项目。</description>
		<link>struggle3.github.io/blog.github.io/blog.github.io</link>
		<atom:link href="struggle3.github.io/blog.github.io/blog.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>harbor安装</title>
				<description>&lt;h1 id=&quot;1-必备条件&quot;&gt;1. 必备条件&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Python应该是2.7或更高版本&lt;/li&gt;
  &lt;li&gt;Docker引擎应为1.10或更高版本&lt;/li&gt;
  &lt;li&gt;DockerCompose需要为1.6.0或更高版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-harbor安装&quot;&gt;2. harbor安装&lt;/h1&gt;
&lt;h2 id=&quot;21-官方地址&quot;&gt;2.1. 官方地址：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/vmware/harbor/releases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-修改harborcfg&quot;&gt;2.2. 修改harbor.cfg&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;hostname：目标的主机名或者完全限定域名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ui_url_protocol：http或https。默认为http&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;db_password：用于db_auth的MySQL数据库的根密码。更改此密码进行任何生产用途&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;max_job_workers：（默认值为3）允许工作人员同步到远程目标,增加此数字允许系统中更多的并发复制作业。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;customize_crt：（on或off。默认为on）当此属性打开时prepare脚本将为注册表的令牌的生成/验证创
建私钥和根证书&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ssl_cert：SSL证书的路径，仅当协议设置为https时才应用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ssl_cert_key：SSL密钥的路径，仅当协议设置为https时才应用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;secretkey_path：用于在复制策略中加密或解密远程注册表的密码的密钥路径&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-安装步骤&quot;&gt;3. 安装步骤&lt;/h1&gt;

&lt;h2 id=&quot;31-创建https证书以及配置相关目录权限&quot;&gt;3.1 创建https证书以及配置相关目录权限&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;openssl genrsa -des3 -out server.key 2048 #生成2048位的私钥&lt;/li&gt;
  &lt;li&gt;openssl req -new -key server.key -out server.csr #生成证书&lt;/li&gt;
  &lt;li&gt;cp server.key server.key.org #备份私钥&lt;/li&gt;
  &lt;li&gt;openssl rsa -in server.key.org -out server.key #退密钥保证nginx使用&lt;/li&gt;
  &lt;li&gt;openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt&lt;/li&gt;
  &lt;li&gt;mkdir -p /data/cert&lt;/li&gt;
  &lt;li&gt;chmod -R 777 /data/cert #说明&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-复制harbor&quot;&gt;3.2 复制harbor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;直接使用xftp上传到/usr/local/目录中&lt;/li&gt;
  &lt;li&gt;解压tar -zxvf harbor-offline-installer-&lt;version&gt;.tgz&lt;/version&gt;&lt;/li&gt;
  &lt;li&gt;进入/usr/local/harbor&lt;/li&gt;
  &lt;li&gt;修改harbor.cfg相关参数&lt;/li&gt;
  &lt;li&gt;执行./install.sh&lt;/li&gt;
  &lt;li&gt;执行完成后显示Harbor has been installed and started successfully表示成功&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Creating network &lt;span class=&quot;s2&quot;&gt;&quot;harbor_harbor&quot;&lt;/span&gt; with the default driver
Creating harbor-log ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-adminserver ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-db          ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating registry           ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-ui          ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-jobservice  ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating nginx              ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

✔ &lt;span class=&quot;nt&quot;&gt;----Harbor&lt;/span&gt; has been installed and started successfully.----

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;harbor访问测试&quot;&gt;harbor访问测试&lt;/h2&gt;

&lt;p&gt;地址:hub.somoiot.com&lt;/p&gt;

&lt;p&gt;默认管理员用户名:admin&lt;/p&gt;

&lt;p&gt;默认管理员密码:Harbor12345&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;访问地址为harbor.cfg文件中的hostname所设置的内容&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;34-harbor容器测试&quot;&gt;3.4 harbor容器测试&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过以上命令如果出现如下结果表示harbor正常&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                    PORTS                                                              NAMES
f7bbedc5fff6        vmware/nginx-photon:1.11.13        &lt;span class=&quot;s2&quot;&gt;&quot;nginx -g 'daemon ...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:4443-&amp;gt;4443/tcp   nginx
e0ec964c19bd        vmware/harbor-jobservice:v1.2.0    &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_jo...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes                                                                                 harbor-jobservice
6c2492697c89        vmware/harbor-ui:v1.2.0            &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_ui&quot;&lt;/span&gt;      5 minutes ago       Up 5 minutes                                                                                 harbor-ui
80eb4ab639ec        vmware/registry:2.6.2-photon       &lt;span class=&quot;s2&quot;&gt;&quot;/entrypoint.sh se...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              5000/tcp                                                           registry
edd9febe0a9c        vmware/harbor-db:v1.2.0            &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              3306/tcp                                                           harbor-db
a32c62e85ecf        vmware/harbor-adminserver:v1.2.0   &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_ad...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes                                                                                 harbor-adminserver
e3f991179e33        vmware/harbor-log:v1.2.0           &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh -c 'crond...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              127.0.0.1:1514-&amp;gt;514/tcp                                            harbor-log

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-使用&quot;&gt;4. 使用&lt;/h1&gt;

&lt;h2 id=&quot;41-服务端&quot;&gt;4.1. 服务端&lt;/h2&gt;

&lt;h3 id=&quot;411-指定镜像仓库地址&quot;&gt;4.1.1. 指定镜像仓库地址&lt;/h3&gt;

&lt;p&gt;添加/etc/docker/daemon.json配置以便于docker认证通过&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;412-下载测试镜像&quot;&gt;4.1.2. 下载测试镜像&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;413-给镜像重新打标签&quot;&gt;4.1.3. 给镜像重新打标签&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockertag hello-world serverip/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;414-登录进行上传&quot;&gt;4.1.4. 登录进行上传&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockerlogin serverip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;42-docker客户端&quot;&gt;4.2. docker客户端&lt;/h2&gt;

&lt;h3 id=&quot;421-指定镜像仓库地址&quot;&gt;4.2.1. 指定镜像仓库地址&lt;/h3&gt;

&lt;p&gt;添加/etc/docker/daemon.json配置以便于docker认证通过&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;422-下载测试镜像&quot;&gt;4.2.2. 下载测试镜像&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull ip/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意:以上环境如果没有DNS解析服务必须要在/etc/hosts文件中添加一行解析记录&lt;/strong&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 16 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/16/harbor-install.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/16/harbor-install.html</guid>
			</item>
		
			<item>
				<title>docker容器管理</title>
				<description>&lt;h1 id=&quot;基本概念&quot;&gt;基本概念&lt;/h1&gt;

&lt;p&gt;Docker 包括三个基本概念:镜像（Image）、容器（Container）、仓库（Repository）理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Docker 镜像（Image）是模板类似于生活中楼房的图纸建筑工人根据图纸建造楼房同时也和程序中类（class）相似，程序员可以通过类（class）创建相关实例。&lt;/li&gt;
  &lt;li&gt;Docker 容器（Container）是镜像创建并运行的实例，可以当作为一个迷你的Linux系统和运行的相关应用程序。&lt;/li&gt;
  &lt;li&gt;Docker 仓库（Repository）是存放镜像文件的地方，类似于程序中的对象创建工厂和IOC容器（可能比喻不是特别恰当）及git。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;基础命令&quot;&gt;基础命令&lt;/h1&gt;

&lt;p&gt;命令是运维人员与docker交互的入口,命令除了单条使用外，还支持赋值、解析变量、嵌套使用。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;序号&lt;/th&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;docker info&lt;/td&gt;
      &lt;td&gt;守护进程的系统资源设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;docker search&lt;/td&gt;
      &lt;td&gt;仓库的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;docker pull&lt;/td&gt;
      &lt;td&gt;仓库的下载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;docker images&lt;/td&gt;
      &lt;td&gt;镜像的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;docker rmi&lt;/td&gt;
      &lt;td&gt;镜像的删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;docker ps&lt;/td&gt;
      &lt;td&gt;容器的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;docker run&lt;/td&gt;
      &lt;td&gt;容器的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;docker start&lt;/td&gt;
      &lt;td&gt;容器启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;docker stop&lt;/td&gt;
      &lt;td&gt;容器停止&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;单个容器管理&quot;&gt;单个容器管理&lt;/h1&gt;
&lt;p&gt;每个容器被创建后都会分配一个ID作为容器的唯一标示后续对容器的启动、停止、修改、删除等所有操作都是通过ID来完成类似数据库概念中的主键。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;序号&lt;/th&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;docker ps –no-trunc&lt;/td&gt;
      &lt;td&gt;查看&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;docker stop/start CONTAINERID&lt;/td&gt;
      &lt;td&gt;停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;docker start/stop webapp&lt;/td&gt;
      &lt;td&gt;通过容器别名启动/停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;docker inspect webapp&lt;/td&gt;
      &lt;td&gt;通过容器别名启动/停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;docker logs webapp&lt;/td&gt;
      &lt;td&gt;查看容器日志&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;docker stats webapp&lt;/td&gt;
      &lt;td&gt;查看容器所占用的系统资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;docker exec 容器名 容器内执行的命令&lt;/td&gt;
      &lt;td&gt;容器执行命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;docker exec -it 容器名 /bin/bash&lt;/td&gt;
      &lt;td&gt;登入容器的bash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;–restart=always&lt;/td&gt;
      &lt;td&gt;容器的自动启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;-h x.xx.xx&lt;/td&gt;
      &lt;td&gt;设置容器主机名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;–dns xx.xx.xx.xx&lt;/td&gt;
      &lt;td&gt;设置容器使用的 DNS 服务器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;–dns-search&lt;/td&gt;
      &lt;td&gt;DNS 搜索设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;–add-host hostname:IP&lt;/td&gt;
      &lt;td&gt;注入 hostname &amp;lt;&amp;gt; IP 解析&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;–rm&lt;/td&gt;
      &lt;td&gt;服务停止时自动删除&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
				<pubDate>Mon, 15 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/15/docker-manager.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/15/docker-manager.html</guid>
			</item>
		
			<item>
				<title>docker compose安装</title>
				<description>&lt;h1 id=&quot;docker-compose简介&quot;&gt;docker-compose简介&lt;/h1&gt;

&lt;p&gt;Docker Compose是Docker官方编排项目之一，负责快速在集群中部署分布式应用。&lt;/p&gt;

&lt;p&gt;Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。&lt;/p&gt;

&lt;p&gt;Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。&lt;/p&gt;

&lt;p&gt;一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。&lt;/p&gt;

&lt;p&gt;一个服务当中可包括多个容器实例Docker-Compose并没有解决负载均衡的问题因此需要借助其它工具实现服务发现及负载均衡。&lt;/p&gt;

&lt;p&gt;Docker-Compose的配置文件默认为docker-compose.yml可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，如果定义了多个有依赖关系的服务及每个服务运行的容器。&lt;/p&gt;

&lt;h1 id=&quot;docker-compose安装&quot;&gt;docker-compose安装&lt;/h1&gt;
&lt;p&gt;下载地址：https://github.com/docker/compose/releases&lt;/p&gt;

&lt;p&gt;安装方法：移动是/usr/local/bin/目录下并赋于chmod a+x权限即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;docker-commpose /usr/local/bin/
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;检查版本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-compose用法&quot;&gt;docker-compose用法&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;-f 指定yml文件位置&lt;/li&gt;
  &lt;li&gt;ps 显示所有容器信息&lt;/li&gt;
  &lt;li&gt;restart 重启容器&lt;/li&gt;
  &lt;li&gt;logs 查看日志&lt;/li&gt;
  &lt;li&gt;config -q 验证yml文件是否正确&lt;/li&gt;
  &lt;li&gt;stop 停止容器&lt;/li&gt;
  &lt;li&gt;start 启动容器&lt;/li&gt;
  &lt;li&gt;up -d 启动容器项目&lt;/li&gt;
  &lt;li&gt;pause 暂停容器&lt;/li&gt;
  &lt;li&gt;unpause 恢复暂停&lt;/li&gt;
  &lt;li&gt;rm 删除容器&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Sun, 14 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/14/docker-compose.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/14/docker-compose.html</guid>
			</item>
		
			<item>
				<title>docker加速</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;由于docker镜像在国外导致国内pull相关镜像速度实在有点受不了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前采用阿里云的&lt;strong&gt;容器镜像加速&lt;/strong&gt;进行加速，方法很简单就是添加/etc/docker/daemon.json文件即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/docker
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/docker/daemon.json &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'
{
  &quot;registry-mirrors&quot;: [&quot;https://yj8o3p4r.mirror.aliyuncs.com&quot;]
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参考文档地址：https://help.aliyun.com/document_detail/60750.html&lt;/p&gt;
</description>
				<pubDate>Sat, 13 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/13/docker-deamon.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/13/docker-deamon.html</guid>
			</item>
		
			<item>
				<title>docker安装</title>
				<description>&lt;p&gt;基于Linux的docker的安装方法&lt;/p&gt;
&lt;h1 id=&quot;1-脚本安装&quot;&gt;1. 脚本安装&lt;/h1&gt;
&lt;p&gt;直接使用官方给的安装脚本进行安装，脚本装安装最新版本docker容器，在生产环境中不建议使用此方法因为最新版可能存在一些bug导致一些异常问题。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com/ | sh
systemctl start docker 
systemctl &lt;span class=&quot;nb&quot;&gt;enable 
&lt;/span&gt;docker docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-yum安装&quot;&gt;2. yum安装&lt;/h1&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/etc/yum.repos.d/docker.repo &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[dockerrepo]
name=Docker Repository 
baseurl=https://yum.dockerproject.org/repo/main/centos/7 
enabled=1
gpgcheck=1 
gpgkey=https://yum.dockerproject.org/gpg EOF 
yum install docker
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-rpm安装推荐&quot;&gt;3. rpm安装（推荐）&lt;/h1&gt;
&lt;h2 id=&quot;31-下载地址&quot;&gt;3.1. 下载地址:&lt;/h2&gt;

&lt;p&gt;https://download.docker.com/linux/centos/7/x86_64/stable/Packages/&lt;/p&gt;

&lt;h2 id=&quot;32-步骤&quot;&gt;3.2. 步骤:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;下载docker-ce-17.03.0.ce-1.el7.centos.x86_64.rpm文件&lt;/li&gt;
  &lt;li&gt;下载docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch.rpm文件&lt;/li&gt;
  &lt;li&gt;在root下创建docker目录&lt;/li&gt;
  &lt;li&gt;移动(mv docker* docker)以上两个文件到docker目录&lt;/li&gt;
  &lt;li&gt;进入docker(cd docker)目录执行yum -y install *命令&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;33-防火墙设置&quot;&gt;3.3. 防火墙设置&lt;/h2&gt;

&lt;p&gt;因为docker会利用防火墙进行一些设置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld &lt;span class=&quot;c&quot;&gt;#关闭防火墙&lt;/span&gt;
systemctl disable firewalld &lt;span class=&quot;c&quot;&gt;#禁用开机自启&lt;/span&gt;
getenforce &lt;span class=&quot;c&quot;&gt;#查看selinux是否为Disabled&lt;/span&gt;
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;iptables-services
systemctl start iptables &lt;span class=&quot;c&quot;&gt;#启动&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;iptables &lt;span class=&quot;c&quot;&gt;#启用开机自启&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#清空规则&lt;/span&gt;
service iptables save &lt;span class=&quot;c&quot;&gt;#保存&lt;/span&gt;
yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Fri, 12 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/12/docker-install.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/12/docker-install.html</guid>
			</item>
		
			<item>
				<title>firewalld常用命令</title>
				<description>&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;查看是否开启
systemctl status firewalld.service&lt;/li&gt;
  &lt;li&gt;打开防火墙
systemctl start firewalld.service&lt;/li&gt;
  &lt;li&gt;停用防火墙
systemctl disable firewalld&lt;/li&gt;
  &lt;li&gt;禁用防火墙
systemctl stop firewalld.service&lt;/li&gt;
  &lt;li&gt;开机启动
systemctl enable firewalld&lt;/li&gt;
  &lt;li&gt;取消开机启动
systemctl disable firewalld&lt;/li&gt;
  &lt;li&gt;查看运行状态
firewall-cmd –state&lt;/li&gt;
  &lt;li&gt;查看接口信息
firewall-cmd –list-all&lt;/li&gt;
  &lt;li&gt;更新防火墙规则方法1:无需断开连接，动态更改规则
firewall-cmd –reload&lt;/li&gt;
  &lt;li&gt;更新防火墙规则方法2:断开连接，以重启的方式更改规则
firewall-cmd –complete-reload&lt;/li&gt;
  &lt;li&gt;查看帮助
firewall-cmd –help
–zone=NAME # 指定 Zone
–permanent # 为永久生效
–timeout=seconds # 持续一段时间，到期后自动移除，经常用于调试，且不能与 –permanent 同时使用&lt;/li&gt;
  &lt;li&gt;追加一个8181端口，永久有效
firewall-cmd –add-port=8181/tcp –permanent&lt;/li&gt;
  &lt;li&gt;追加一段端口范围
firewall-cmd –add-port=6000-6600/tcp&lt;/li&gt;
  &lt;li&gt;开放 ftp 服务
firewall-cmd –add-service=ftp&lt;/li&gt;
  &lt;li&gt;添加eth0 接口至 public 信任等级，永久有效
firewall-cmd –zone=public –add-interface=eth0 –permanent&lt;/li&gt;
  &lt;li&gt;配置 public zone 的端口转发
firewall-cmd –zone=public –add-masquerade&lt;/li&gt;
  &lt;li&gt;然后转发 tcp 22 端口至 9527
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toport=9527&lt;/li&gt;
  &lt;li&gt;转发 22 端口数据至另一个 ip 的相同端口上
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toaddr=192.168.1.123&lt;/li&gt;
  &lt;li&gt;转发 22 端口数据至另一 ip 的 9527 端口上
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toport=9527:toaddr=192.168.1.100&lt;/li&gt;
  &lt;li&gt;IP 封禁
firewall-cmd –permanent –add-rich-rule=”rule family=’ipv4’ source address=’192.168.1.123’ reject”&lt;/li&gt;
  &lt;li&gt;通过 ipset 来封禁 ip
firewall-cmd –permanent –zone=public –new-ipset=blacklist –type=hash:ip
firewall-cmd –permanent –zone=public –ipset=blacklist –add-entry=192.168.1.123&lt;/li&gt;
  &lt;li&gt;封禁网段
firewall-cmd –permanent –zone=public –new-ipset=blacklist –type=hash:net
firewall-cmd –permanent –zone=public –ipset=blacklist –add-entry=192.168.1.0/24&lt;/li&gt;
  &lt;li&gt;倒入 ipset 规则 blacklist，然后封禁 blacklist
firewall-cmd –permanent –zone=public –new-ipset-from-file=/path/blacklist.xml
firewall-cmd –permanent –zone=public –add-rich-rule=’rule source ipset=blacklist drop’&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 20 Dec 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/linux/2020/12/20/firewalld.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/linux/2020/12/20/firewalld.html</guid>
			</item>
		
			<item>
				<title>abp集成SQLite</title>
				<description>&lt;h1 id=&quot;集成sqlite&quot;&gt;集成SQLite&lt;/h1&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;SQLite是一款轻型的开源数据库引擎支持事务、跨平台、嵌入式等特点，在如今云计算被广泛应用的时代将其做为数据存储方式具体简单方便、低成本、零配置、自给自足的优势。&lt;/p&gt;
  &lt;h2 id=&quot;dbmigrator连接字符串&quot;&gt;DbMigrator连接字符串&lt;/h2&gt;
  &lt;p&gt;在项目找到appsettings.json修改如下:&lt;/p&gt;
  &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ConnectionStrings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Data Source=D:/mytest.db;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;h2 id=&quot;httpapihost连接字符串&quot;&gt;HttpApi.Host连接字符串&lt;/h2&gt;
  &lt;p&gt;在项目找到appsettings.json修改如下:&lt;/p&gt;
  &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ConnectionStrings&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Data Source=D:/mytest.db;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;h2 id=&quot;安装sqlite支持&quot;&gt;安装Sqlite支持&lt;/h2&gt;
  &lt;p&gt;在EntityFrameworkCore项目中安装Volo.Abp.EntityFrameworkCore.Sqlite依赖包。&lt;/p&gt;
  &lt;h2 id=&quot;启用sqlite支持&quot;&gt;启用Sqlite支持&lt;/h2&gt;
  &lt;p&gt;在EntityFrameworkCoreModule类中加入DependsOn如下代码:&lt;/p&gt;
  &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;[DependsOn(typeof(AbpEntityFrameworkCoreSqliteModule))]
&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;在EntityFrameworkCoreModule类中的ConfigureServices方法加入如下代码：&lt;/p&gt;
  &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;Configure&amp;lt;AbpDbContextOptions&amp;gt;(options =&amp;gt;
{
    /* The main point to change your DBMS.
        * See also mytestMigrationsDbContextFactory for EF Core tooling. */
    //options.UseSqlServer();
    options.UseSqlite();
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;h2 id=&quot;禁用数据库事务&quot;&gt;禁用数据库事务&lt;/h2&gt;
  &lt;p&gt;&lt;strong&gt;注意：如果不禁用数据事务会出现database is locked异常。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在EntityFrameworkCoreModule类中的ConfigureServices方法加入如下代码：&lt;/p&gt;
  &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;//禁用数据库事务
Configure&amp;lt;AbpUnitOfWorkDefaultOptions&amp;gt;(options =&amp;gt;
{
    options.TransactionBehavior = UnitOfWorkTransactionBehavior.Disabled;
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;h2 id=&quot;启用迁移支持&quot;&gt;启用迁移支持&lt;/h2&gt;
  &lt;p&gt;在EntityFrameworkCore.DbMigrations项目中的MigrationsDbContextFactory类的CreateDbContext修改如下代码:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public mytestMigrationsDbContext CreateDbContext(string[] args)
{
    mytestEfCoreEntityExtensionMappings.Configure();

    var configuration = BuildConfiguration();

    var builder = new DbContextOptionsBuilder&amp;lt;mytestMigrationsDbContext&amp;gt;()
        .UseSqlite(configuration.GetConnectionString(&quot;Default&quot;));
        //.UseSqlServer(configuration.GetConnectionString(&quot;Default&quot;));

    return new mytestMigrationsDbContext(builder.Options);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;删除Migrations文件所有文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;执行命令&quot;&gt;执行命令&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;提示：同时也可以运行控制台的DbMigrator程序&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;添加&lt;/p&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Add-Migration Initial_Sqlite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;删除&lt;/p&gt;
  &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Update-Database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Mon, 07 Dec 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/abp/2020/12/07/abp-sqlite.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/abp/2020/12/07/abp-sqlite.html</guid>
			</item>
		
			<item>
				<title>abpvnext部署</title>
				<description>&lt;h1 id=&quot;安装nginx&quot;&gt;安装nginx&lt;/h1&gt;

&lt;h2 id=&quot;配置-epel源&quot;&gt;配置 EPEL源&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; epel-release
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;安装nginx-1&quot;&gt;安装nginx&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;nginx目录&quot;&gt;nginx目录&lt;/h3&gt;
&lt;p&gt;默认的配置文件为：/etc/nginx/nginx.conf&lt;/p&gt;

&lt;p&gt;自定义配置文件目录为: /etc/nginx/conf.d/&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 前端配置
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;         /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;appwasm&lt;/span&gt;;

        &lt;span class=&quot;c&quot;&gt;# Load configuration files for the default server block.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;/*.&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;htm&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;try_files&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;/ /&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; =&lt;span class=&quot;m&quot;&gt;404&lt;/span&gt;;&lt;span class=&quot;c&quot;&gt;#必须配置404
&lt;/span&gt;        }
        &lt;span class=&quot;n&quot;&gt;error_page&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;404&lt;/span&gt;              /&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;
    }
&lt;span class=&quot;c&quot;&gt;# 后端api配置
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;;

        &lt;span class=&quot;c&quot;&gt;#charset koi8-r;
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#access_log  logs/host.access.log  main;
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;htm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;jsp&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Upgrade&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;http_upgrade&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;alive&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_cache_bypass&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;http_upgrade&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Forwarded&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;proxy_add_x_forwarded_for&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Forwarded&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Proto&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;操作nginx&quot;&gt;操作nginx&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;启动 nginx
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;停止nginx
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重启nginx
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart nginx
nginx &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;查看nginx状态
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;启用开机启动nginx
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;禁用开机启动nginx
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;防火墙firewalld&quot;&gt;防火墙firewalld&lt;/h1&gt;

&lt;h2 id=&quot;开启80端口&quot;&gt;开启80端口&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;public &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;80/tcp &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令含义：
–zone #作用域
–add-port=80/tcp  #添加端口，格式为：端口/通讯协议
–permanent   #永久生效，没有此参数重启后失效&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;重启防火墙&quot;&gt;重启防火墙&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查看端口&quot;&gt;查看端口&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt;
firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-port&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;supervisor安装&quot;&gt;supervisor安装&lt;/h1&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;https://www.cnblogs.com/xueweihan/p/6195824.html&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/260071860&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/flaming/p/8149973.html&lt;/p&gt;

&lt;h2 id=&quot;名词解释&quot;&gt;名词解释&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;supervisor：要安装的软件的名称。
supervisord：装好supervisor软件后，supervisord用于启动supervisor服务。
supervisorctl：用于管理supervisor配置文件中program和supervisor服务本身。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;使用yum命令安装推荐&quot;&gt;使用yum命令安装（推荐）&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;epel-release
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; supervisor
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;supervisord &lt;span class=&quot;c&quot;&gt;# 开机自启动&lt;/span&gt;
systemctl start supervisord &lt;span class=&quot;c&quot;&gt;# 启动supervisord服务&lt;/span&gt;
systemctl stop supervisord &lt;span class=&quot;c&quot;&gt;# 停止supervisord服务&lt;/span&gt;
systemctl status supervisord &lt;span class=&quot;c&quot;&gt;# 查看supervisord服务状态&lt;/span&gt;
ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt;|grep supervisord &lt;span class=&quot;c&quot;&gt;# 查看是否存在supervisord进程&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置dotnet命令&quot;&gt;配置dotnet命令&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在/etc/supervisord.d目录下添加一个ini文件，同时也可以通过/etc目录下面的supervisord.conf文件中的[include]files进行自定义加载ini文件路径。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[program:myapp]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dotnet Wang.MyApp.HttpApi.Host.dll --urls=http://localhost:5000#要执行的命令&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/apphost/#命令执行的目录&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ASPNETCORE__ENVIRONMENT=Production#环境变量&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;root#进程执行的用户身份&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;stopsignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INT&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;autostart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true#是否自动重启&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;autorestart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true#是否自动启动&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;startsecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10#自动重启间隔&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;stderr_logfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/supervisor/myapp_err.log#标准错误日志&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;stdout_logfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/supervisor/myapp_out.log#标准输出日志&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意：#后边的内容要去掉这里是注释但是supervisor不识别。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意：#日志目录必须是已经存在的目录，不然会出现无法启动的情况。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;卸载&quot;&gt;卸载&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; remove supervisor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Tue, 01 Dec 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/abp/2020/12/01/abp-deployment.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/abp/2020/12/01/abp-deployment.html</guid>
			</item>
		
			<item>
				<title>abp发布说明</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;如果把ABP.VNext项目发布至产品环境时运行需要注意如下事项：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;发布后请修改HttpApi.Host这项目中的appsettings.json文件中的CorsOrigins参数值改为前端服务地址&lt;/li&gt;
  &lt;li&gt;发布后请修改HttpApi.Host这项目中的appsettings.json文件中的AuthServer参数值改为认证服务地址&lt;/li&gt;
  &lt;li&gt;发布后请修改前端项目的appsettings.json文件中AuthServer中Authority参数值改为认证服务地址&lt;/li&gt;
  &lt;li&gt;发布后请修改前端项目的appsettings.json文件中RemoteServices中BaseUrl参数值改为HttpApi.Host服务地址&lt;/li&gt;
  &lt;li&gt;发布前在数据迁移时在DbMigrator中将IdentityServer相关的Clients参数的RootUrl进行对应修改&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sat, 21 Nov 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/abp/2020/11/21/abp-publish.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/abp/2020/11/21/abp-publish.html</guid>
			</item>
		
			<item>
				<title>abp集成ant blazor租户</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;集成完相关框架后开始对ABP默认的租户进行单页CRUD开，在开发过程中参考了AbpDesignCrudPageBase进行一个简单封装以实现快速开发和组件重用。&lt;/p&gt;
  &lt;h2 id=&quot;加入实际权限代码如下&quot;&gt;加入实际权限代码如下&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;导入名称空间
    &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.TenantManagement
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;加入权限
    &lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;@attribute [Authorize(TenantManagementPermissions.Tenants.Default)]
&lt;/code&gt;&lt;/pre&gt;
    &lt;h2 id=&quot;前端代码&quot;&gt;前端代码&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;@page &quot;/tenant/tenants&quot;
@attribute [Authorize(TenantManagementPermissions.Tenants.Default)]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.TenantManagement
@using Volo.Abp.TenantManagement.Localization
@using Volo.Abp.FeatureManagement.Blazor.Components
@inherits TenantManagementBase
@inject IStringLocalizer&amp;lt;AbpTenantManagementResource&amp;gt; L
&amp;lt;PageContainer Title=&quot;@L[&quot;Menu:TenantManagement&quot;]&quot;&amp;gt;
    &amp;lt;Card Title=&quot;@L[&quot;Tenants&quot;]&quot;&amp;gt;
        &amp;lt;Extra&amp;gt;
            @if (HasCreatePermission)
            {
                &amp;lt;AntDesign.Button OnClick=&quot;OpenCreateModalAsync&quot; Class=&quot;ant-btn ant-btn-primary&quot;&amp;gt;@L[&quot;NewTenant&quot;]&amp;lt;/AntDesign.Button&amp;gt;
            }
        &amp;lt;/Extra&amp;gt;
        &amp;lt;ChildContent&amp;gt;
            @* ************************* DATA GRID ************************* *@
            &amp;lt;Table DataSource=&quot;@Entities&quot; TItem=&quot;TenantDto&quot; PageSize=&quot;PageSize&quot; Total=&quot;TotalCount&quot; OnChange=&quot;OnDataGridReadAsync&quot;&amp;gt;
                &amp;lt;AntDesign.Column @bind-Field=&quot;@context.Name&quot; Title=&quot;@L[&quot;TenantName&quot;].Value&quot;&amp;gt;
                    &amp;lt;Template&amp;gt;
                        @context.Name
                        @*@if (context.As&amp;lt;IdentityRoleDto&amp;gt;().IsDefault)
                            {
                                &amp;lt;Tag Class=&quot;volcano&quot;&amp;gt;@L[&quot;DisplayName:IsDefault&quot;]&amp;lt;/Tag&amp;gt;
                            }
                            @if (context.As&amp;lt;IdentityRoleDto&amp;gt;().IsPublic)
                            {
                                &amp;lt;Tag Class=&quot;green&quot;&amp;gt;@L[&quot;DisplayName:IsPublic&quot;]&amp;lt;/Tag&amp;gt;
                            }*@
                    &amp;lt;/Template&amp;gt;
                &amp;lt;/AntDesign.Column&amp;gt;
                &amp;lt;ActionColumn Title=&quot;@L[&quot;Actions&quot;]&quot;&amp;gt;
                    &amp;lt;Space&amp;gt;
                        @if (HasUpdatePermission)
                        {
                            &amp;lt;SpaceItem&amp;gt;
                                &amp;lt;AntDesign.Button Class=&quot;ant-btn ant-btn-primary&quot; OnClick=&quot;() =&amp;gt; OpenEditModalAsync(context.As&amp;lt;TenantDto&amp;gt;().Id)&quot;&amp;gt;@L[&quot;Edit&quot;]&amp;lt;/AntDesign.Button&amp;gt;
                            &amp;lt;/SpaceItem&amp;gt;
                        }
                        @if (HasDeletePermission)
                        {
                            &amp;lt;SpaceItem&amp;gt;
                                &amp;lt;AntDesign.Button Danger OnClick=&quot;() =&amp;gt; DeleteEntityAsync(context.As&amp;lt;TenantDto&amp;gt;())&quot;&amp;gt;@L[&quot;Delete&quot;]&amp;lt;/AntDesign.Button&amp;gt;
                            &amp;lt;/SpaceItem&amp;gt;
                        }
                        @if (HasManageConnectionStringsPermission)
                        {
                            &amp;lt;SpaceItem&amp;gt;
                                &amp;lt;AntDesign.Button OnClick=&quot;() =&amp;gt; OpenEditConnectionStringModalAsync(context.As&amp;lt;TenantDto&amp;gt;().Id)&quot;&amp;gt;@L[&quot;ConnectionStrings&quot;]&amp;lt;/AntDesign.Button&amp;gt;
                            &amp;lt;/SpaceItem&amp;gt;
                        }
                        @if (HasManageFeaturesPermission)
                        {
                            &amp;lt;SpaceItem&amp;gt;
                                &amp;lt;AntDesign.Button OnClick=&quot;() =&amp;gt; FeatureManagementModal.OpenAsync(FeatureProviderName, context.As&amp;lt;TenantDto&amp;gt;().Id.ToString())&quot;&amp;gt;@L[&quot;Features&quot;]&amp;lt;/AntDesign.Button&amp;gt;
                            &amp;lt;/SpaceItem&amp;gt;
                        }
                    &amp;lt;/Space&amp;gt;
                &amp;lt;/ActionColumn&amp;gt;
            &amp;lt;/Table&amp;gt;
        &amp;lt;/ChildContent&amp;gt;
    &amp;lt;/Card&amp;gt;
    @* ************************* CREATE MODAL ************************* *@
    @if (HasCreatePermission)
    {
        RenderFragment footerCreate =@&amp;lt;Template&amp;gt;
        &amp;lt;Button Class=&quot;ant-btn ant-btn-primary&quot; OnClick=&quot;CloseCreateModalAsync&quot;&amp;gt;
            @L[&quot;Cancel&quot;]
        &amp;lt;/Button&amp;gt;
        &amp;lt;Button OnClick=&quot;CreateEntityAsync&quot;&amp;gt;
            @L[&quot;Save&quot;]
        &amp;lt;/Button&amp;gt;
    &amp;lt;/Template&amp;gt;;
&amp;lt;Modal Title=&quot;@L[&quot;NewTenant&quot;].Value&quot; Visible=&quot;CreateVisible&quot; Footer=&quot;@footerCreate&quot;&amp;gt;
    &amp;lt;Form Model=&quot;@NewEntity&quot; LabelCol=&quot;new ColLayoutParam { Span = 8 }&quot; WrapperCol=&quot;new ColLayoutParam { Span = 16 }&quot;&amp;gt;
        &amp;lt;FormItem Label=&quot;@L[&quot;TenantName&quot;]&quot;&amp;gt;
            &amp;lt;Input @bind-Value=&quot;@NewEntity.Name&quot; /&amp;gt;
        &amp;lt;/FormItem&amp;gt;
        &amp;lt;FormItem Label=&quot;@L[&quot;DisplayName:AdminEmailAddress&quot;]&quot;&amp;gt;
            &amp;lt;Input @bind-Value=&quot;@NewEntity.AdminEmailAddress&quot; /&amp;gt;
        &amp;lt;/FormItem&amp;gt;
        &amp;lt;FormItem Label=&quot;@L[&quot;DisplayName:AdminPassword&quot;]&quot;&amp;gt;
            &amp;lt;Input @bind-Value=&quot;@NewEntity.AdminPassword&quot; /&amp;gt;
        &amp;lt;/FormItem&amp;gt;
    &amp;lt;/Form&amp;gt;
&amp;lt;/Modal&amp;gt;
}
@* ************************* EDIT MODAL ************************* *@
    @if (HasUpdatePermission)
    {
        RenderFragment footerEdit =@&amp;lt;Template&amp;gt;
        &amp;lt;Button Class=&quot;ant-btn ant-btn-primary&quot; OnClick=&quot;CloseEditModalAsync&quot;&amp;gt;
            @L[&quot;Cancel&quot;]
        &amp;lt;/Button&amp;gt;
        &amp;lt;Button OnClick=&quot;UpdateEntityAsync&quot;&amp;gt;
            @L[&quot;Save&quot;]
        &amp;lt;/Button&amp;gt;
    &amp;lt;/Template&amp;gt;;
&amp;lt;Modal Title=&quot;@L[&quot;Edit&quot;].Value&quot; Visible=&quot;EditVisible&quot; Footer=&quot;@footerEdit&quot;&amp;gt;
    &amp;lt;Form Model=&quot;@EditingEntity&quot;&amp;gt;
        &amp;lt;FormItem Label=&quot;@L[&quot;TenantName&quot;]&quot;&amp;gt;
            &amp;lt;Input @bind-Value=&quot;@EditingEntity.Name&quot; /&amp;gt;
        &amp;lt;/FormItem&amp;gt;
    &amp;lt;/Form&amp;gt;
&amp;lt;/Modal&amp;gt;
}
@* ************************* EDIT CONNECTION STRING MODAL ************************* *@
    @if (HasUpdatePermission)
    {
        RenderFragment footerConnectionEdit =@&amp;lt;Template&amp;gt;
        &amp;lt;Button Class=&quot;ant-btn ant-btn-primary&quot; OnClick=&quot;CloseEditConnectionStringModal&quot;&amp;gt;
            @L[&quot;Cancel&quot;]
        &amp;lt;/Button&amp;gt;
        &amp;lt;Button OnClick=&quot;UpdateConnectionStringAsync&quot;&amp;gt;
            @L[&quot;Save&quot;]
        &amp;lt;/Button&amp;gt;
    &amp;lt;/Template&amp;gt;;
&amp;lt;Modal Title=&quot;@L[&quot;ConnectionStrings&quot;].Value&quot; Visible=&quot;ManageConnectionStringModal&quot; Footer=&quot;@footerConnectionEdit&quot;&amp;gt;
    &amp;lt;Form Model=&quot;@EditingEntity&quot;&amp;gt;
        &amp;lt;FormItem Label=&quot;@L[&quot;DisplayName:DefaultConnectionString&quot;]&quot;&amp;gt;
            &amp;lt;Checkbox @bind-Checked=&quot;@TenantInfo.UseSharedDatabase&quot; @bind-Value=&quot;@TenantInfo.UseSharedDatabase&quot;&amp;gt;
                
            &amp;lt;/Checkbox&amp;gt;
        &amp;lt;/FormItem&amp;gt;
        @if (!TenantInfo.UseSharedDatabase)
        {
            &amp;lt;FormItem Label=&quot;@L[&quot;DisplayName:DefaultConnectionString&quot;]&quot;&amp;gt;
                &amp;lt;Input @bind-Value=&quot;@TenantInfo.DefaultConnectionString&quot; /&amp;gt;
            &amp;lt;/FormItem&amp;gt;
        }
    &amp;lt;/Form&amp;gt;
&amp;lt;/Modal&amp;gt;
}
    @if (HasManageFeaturesPermission)
    {
        &amp;lt;FeatureManagementModal @ref=&quot;FeatureManagementModal&quot; /&amp;gt;
    }
&amp;lt;/PageContainer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;组件代码&quot;&gt;组件代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;using AntDesign;
using Microsoft.AspNetCore.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp.FeatureManagement.Blazor.Components;
using Volo.Abp.TenantManagement;
using Volo.Abp.TenantManagement.Blazor;

namespace MyAbp.Blazor.Pages.tenant
{
    public partial class TenantManagementBase:AntDesignCrudPageBase&amp;lt;ITenantAppService, TenantDto, Guid, GetTenantsInput, TenantCreateDto, TenantUpdateDto&amp;gt;
    {
        protected const string FeatureProviderName = &quot;T&quot;;

        protected bool ShouldShowEntityActions;
        protected bool HasManageConnectionStringsPermission;
        protected bool HasManageFeaturesPermission;

        protected FeatureManagementModal FeatureManagementModal;

        protected bool ManageConnectionStringModal;

        protected TenantInfoModel TenantInfo;

        public TenantManagementBase()
        {
            ObjectMapperContext = typeof(AbpTenantManagementBlazorModule);

            CreatePolicyName = TenantManagementPermissions.Tenants.Create;
            UpdatePolicyName = TenantManagementPermissions.Tenants.Update;
            DeletePolicyName = TenantManagementPermissions.Tenants.Delete;

            TenantInfo = new TenantInfoModel();
        }

        protected override async Task SetPermissionsAsync()
        {
            await base.SetPermissionsAsync();

            HasManageConnectionStringsPermission = await AuthorizationService.IsGrantedAsync(TenantManagementPermissions.Tenants.ManageConnectionStrings);
            HasManageFeaturesPermission = await AuthorizationService.IsGrantedAsync(TenantManagementPermissions.Tenants.ManageFeatures);

            ShouldShowEntityActions = HasUpdatePermission ||
                                      HasDeletePermission ||
                                      HasManageConnectionStringsPermission ||
                                      HasManageFeaturesPermission;
        }

        protected virtual async Task OpenEditConnectionStringModalAsync(Guid id)
        {
            var tenantConnectionString = await AppService.GetDefaultConnectionStringAsync(id);

            TenantInfo = new TenantInfoModel
            {
                Id = id,
                DefaultConnectionString = tenantConnectionString,
                UseSharedDatabase = tenantConnectionString.IsNullOrWhiteSpace()
            };

            //ManageConnectionStringModal.Show();
            ManageConnectionStringModal = true;
        }

        protected virtual Task CloseEditConnectionStringModal()
        {
            //ManageConnectionStringModal.Hide();
            ManageConnectionStringModal = false;
            return Task.CompletedTask;
        }

        protected virtual async Task UpdateConnectionStringAsync()
        {
            await CheckPolicyAsync(TenantManagementPermissions.Tenants.ManageConnectionStrings);

            if (TenantInfo.UseSharedDatabase || TenantInfo.DefaultConnectionString.IsNullOrWhiteSpace())
            {
                await AppService.DeleteDefaultConnectionStringAsync(TenantInfo.Id);
            }
            else
            {
                await AppService.UpdateDefaultConnectionStringAsync(TenantInfo.Id, TenantInfo.DefaultConnectionString);
            }

            //ManageConnectionStringModal.Hide();
            ManageConnectionStringModal = false;
        }
    }

    public class TenantInfoModel
    {
        public Guid Id { get; set; }

        public bool UseSharedDatabase { get; set; }

        public string DefaultConnectionString { get; set; }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;效果图&quot;&gt;效果图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog.github.io/assets/images/abp/0401.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/blog.github.io/assets/images/abp/0402.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 20 Nov 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/abp/2020/11/20/abp-blazor-tenant.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/abp/2020/11/20/abp-blazor-tenant.html</guid>
			</item>
		
	</channel>
</rss>
