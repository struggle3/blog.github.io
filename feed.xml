<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>ye程序员</title>
		<description>我是一名普通的80后程序员一直从事.net平台技术栈的web开发工作，一个忠实的微软粉爱生活、爱代码、爱技术喜欢研究开源项目。</description>
		<link>struggle3.github.io/blog.github.io/blog.github.io</link>
		<atom:link href="struggle3.github.io/blog.github.io/blog.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>docker远程</title>
				<description>&lt;p&gt;docker同样可以以远程的方式进行访问，但存在安全风险在生产环境中不建议这样使用。&lt;/p&gt;

&lt;p&gt;配置远程访问1
修改/etc/docerk/daemon.jso文件&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tcp://0.0.0.0:2375&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unix://var/run/docker.sock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置远程访问2
修改/usr/lib/systemd/system/docker.service&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;远程命令&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; ip:port &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sat, 20 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/20/docker-yuancheng.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/20/docker-yuancheng.html</guid>
			</item>
		
			<item>
				<title>docker资源限制</title>
				<description>&lt;h1 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h1&gt;

&lt;p&gt;默认情况下docker容器是没有对资源进行限制的它会尽可能地使用宿主机能够使用的内存、CPU、IO最终的结果就是可能造成容器关闭、进程关闭等无法预料的后果。&lt;/p&gt;

&lt;p&gt;可以通过CGroup(Control Groups)是Linux内核提供的一种可以限制、记录、隔离进程组(process groups)所使用的物理资源的机制。&lt;/p&gt;

&lt;p&gt;2007年进入Linux2.6.24内核CGroups不是全新开发的它将进程管理从cpuset中剥离出来。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认情况下容器做任何限制，容器能够占用当前系统能给容器提供的所有资源；&lt;/li&gt;
  &lt;li&gt;Docker限制可以从内存、CPU、Block I/O三个方面；&lt;/li&gt;
  &lt;li&gt;OOME：Out Of Memory Exception；&lt;/li&gt;
  &lt;li&gt;一旦发生OOME任何进程都有可能被杀死包括docker daemon；&lt;/li&gt;
  &lt;li&gt;为此Docker调整了docker daemon的OOM优先级以免被内核关闭。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-建议&quot;&gt;2. 建议&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;应用做内存压力测试了解正常业务需求下使用的内存情况;&lt;/li&gt;
  &lt;li&gt;一定要限制容器的内存使用上限；&lt;/li&gt;
  &lt;li&gt;尽量保证宿主机的资源足够如果通过监控发现资源不足立即进行扩容或者对容器进行迁移；&lt;/li&gt;
  &lt;li&gt;不要使用swap因为会导致内存计算复杂对调度器非常不友好。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;3-内存限制&quot;&gt;3. 内存限制&lt;/h1&gt;

&lt;p&gt;在docker启动参数中和内存限制有关的包括（内存单位b、k、m、g）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-m –memory：容器能使用的最大内存大小，最小值为 4m；&lt;/li&gt;
  &lt;li&gt;–memory-swap：容器能够使用的swap大小；&lt;/li&gt;
  &lt;li&gt;–memory-swappiness：默认情况下，主机可以把容器使用的匿名页（anonymous page）swap出来，你可以设置一个0-100之间的值代表允许swap出来的比例；&lt;/li&gt;
  &lt;li&gt;–memory-reservation：设置一个内存使用的soft limit设置值小于–m设置；&lt;/li&gt;
  &lt;li&gt;–kernel-memory：容器能够使用的kernel memory大小，最小值为4m；&lt;/li&gt;
  &lt;li&gt;–oom-kill-disable：是否运行OOM的时候杀死容器。只有设置了-m才可以把这个选项设置为false,否则容器会耗尽主机内存，而且导致主机应用被杀死。&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;–memory-swap&lt;/th&gt;
      &lt;th&gt;–memory&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;正数S&lt;/td&gt;
      &lt;td&gt;正数M&lt;/td&gt;
      &lt;td&gt;容器可用总空间为S,其中ram为M,swapy主(S-M),若S=M表示无swap资源可用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;正数M&lt;/td&gt;
      &lt;td&gt;相当于示设置swap&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unset&lt;/td&gt;
      &lt;td&gt;正数M&lt;/td&gt;
      &lt;td&gt;若主机启用了swap,则容器的可用swap是2*M&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-1&lt;/td&gt;
      &lt;td&gt;正数M&lt;/td&gt;
      &lt;td&gt;若主机启用了swap,则容器可用主面的所有swap空间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意:在容器内使用free命令看到swap的空间没有真实含义,例如看见的16G并不是真正意义上的16G&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-cpu限制&quot;&gt;4. CPU限制&lt;/h1&gt;

&lt;p&gt;docker提供的CPU资源限制选项可以在多核系统上限制容器能利用哪些vCPU，但是对容器最多能使用的CPU时间有两种限制方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是有多个CPU密集型的容器竞争CPU时，设置各个容器能使用的CPU时间相对比例；&lt;/li&gt;
  &lt;li&gt;二是以绝对的方式设置容器在每个调度周期内最多能使用的CPU时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;41-cpu限制&quot;&gt;4.1 CPU限制&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;–cpuset-cpus=””	允许使用的CPU集，值可以为1,3则限制容器只能使用第2个和第4个CPU；&lt;/li&gt;
  &lt;li&gt;–cpus	能够限制容器可以使用的主机 CPU 个数，并且还可以指定如 1.5 之类的小数；&lt;/li&gt;
  &lt;li&gt;-c,–cpu-shares=0 CPU共享权值（相对权重），默认值 1024；&lt;/li&gt;
  &lt;li&gt;–cpuset-mems=””	允许在上执行的内存节点（MEMs）；&lt;/li&gt;
  &lt;li&gt;–cpu-period=0	即可设置调度周期CFS周期的有效范围是 1ms~1s，对应的–cpu-period的数值范围是1000~1000000；&lt;/li&gt;
  &lt;li&gt;–cpu-quota=0	设置在每个周期内容器能使用的CPU时间，容器的CPU配额必须不小于1ms，即–cpu-quota的值必须 &amp;gt;= 1000，单位微秒。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;42-针对period和quota的实例&quot;&gt;4.2. 针对period和quota的实例&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cpu-period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50000 &lt;span class=&quot;nt&quot;&gt;--cpu-quota&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;25000 ubuntu:16.04 /bin/bash
docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cpu-period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10000 &lt;span class=&quot;nt&quot;&gt;--cpu-quota&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20000 ubuntu:16.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5-实验&quot;&gt;5. 实验&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull lorel/docker-stress-ng &lt;span class=&quot;c&quot;&gt;#拉取压力测试镜像&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; stress &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 256m lorel/docker-stress-ng:latest stress &lt;span class=&quot;nt&quot;&gt;-vm&lt;/span&gt; 2
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; stress &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cpus&lt;/span&gt; 2 lorel/docker-stress-ng:latest stress &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt; 8
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; stress &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cpuset-cpus&lt;/span&gt; 0 lorel/docker-stress-ng:latest stress &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt; 8
docker stats stress &lt;span class=&quot;c&quot;&gt;#查看压力测试&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 19 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/19/docker-xianzhi.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/19/docker-xianzhi.html</guid>
			</item>
		
			<item>
				<title>docker数据卷</title>
				<description>&lt;h1 id=&quot;1-数据卷特性&quot;&gt;1. 数据卷特性&lt;/h1&gt;

&lt;p&gt;数据卷是一个可供一个或多个容器使用的特殊目录，docker镜像由多个只读层叠加而成启动容器时docker会加载只读镜像层并在镜像栈顶部添加一个读写层。从而数据卷具有如下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;数据卷可以在容器之间共享和重用&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对数据卷的修改会立马生效&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对数据卷的更新，不会影响镜像&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据卷默认会一直存在，即使容器被删除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果运行中的容器修改了现有的一个已经存在的文件，那么该文件将会从读写层下面的的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写层中隐藏了该文件的副本并&lt;strong&gt;写时复制&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog.github.io/assets/images/docker/volume.jpg&quot; width=&quot;500&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-数据卷意义&quot;&gt;2. 数据卷意义&lt;/h1&gt;

&lt;p&gt;由于docker容器有自己的名称空间无法与宿主机的文件系统进行交互并且删除&lt;strong&gt;容器数据就会丢失&lt;/strong&gt;，为了保障关闭或重启容器数据不受影响将应程序产生的进行&lt;strong&gt;数据保存&lt;/strong&gt;可以使用数据卷做为解决方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog.github.io/assets/images/docker/volume2.jpg&quot; width=&quot;500&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据卷可以在运行容器时即完成创建与绑定操作。当然，前提需要拥有对应的申明&lt;/li&gt;
  &lt;li&gt;数据卷的目的就是数据持久化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog.github.io/assets/images/docker/volume3.jpg&quot; width=&quot;500&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-数据卷操作&quot;&gt;3. 数据卷操作&lt;/h1&gt;

&lt;h2 id=&quot;31-创建数据卷&quot;&gt;3.1. 创建数据卷&lt;/h2&gt;

&lt;p&gt;命令格式：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume create &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;VOLUME]
&lt;span class=&quot;c&quot;&gt;#Options:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-d, --driver string 指定卷驱动程序名称&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#–label list 设置卷的元数据&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-o, --opt map 设置驱动程序特定选项&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;创建出来的数据卷位于宿主机/var/lib/docker/volumes/下。&lt;/p&gt;

&lt;h2 id=&quot;32-删除数据卷&quot;&gt;3.2. 删除数据卷&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;VOLUME]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;33-列出数据卷&quot;&gt;3.3. 列出数据卷&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;34-查看数据卷详情&quot;&gt;3.4. 查看数据卷详情&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume inspect &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;VOLUME]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;35-删除未使用数据卷&quot;&gt;3.5. 删除未使用数据卷&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-数据卷应用&quot;&gt;4. 数据卷应用&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Docker-managed Volume&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; roc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; MOUNTDIR 镜像
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Bind-mount Volume&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; roc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; HOSTDIR:VOLUMEDIR	镜像
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Union Volume&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; roc &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; ContainerName 镜像
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 18 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/18/docker-volume.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/18/docker-volume.html</guid>
			</item>
		
			<item>
				<title>docker网络管理</title>
				<description>&lt;h1 id=&quot;1-介绍&quot;&gt;1. 介绍&lt;/h1&gt;

&lt;p&gt;docker允许通过外部访问容器或容器互联的方式来提供网络服务，在一般使用中通过docker网桥与NAT的通信模板。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog.github.io/assets/images/docker/network.png&quot; width=&quot;600&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出在Host主机中会一个网口和docker0进行通信，docker0就类似于一个交换机用于交换不同容器之间的数据交互从而完成通信。&lt;/p&gt;

&lt;p&gt;在docker0创建是会生成一个network namespace（命称空间）进行网络隔离一端在容器内部（eth0）另一端在Host主机中这样就是实现了容器与Host主机交互。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：docker0的ip地址就是容器的网关地址，容器的ip地址也是根据docker0进行分配的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-外部网络访问容器dnat&quot;&gt;1.1. 外部网络访问容器(DNAT)&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 镜像

iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; addrtype &lt;span class=&quot;nt&quot;&gt;--dst-type&lt;/span&gt; LOCAL &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DOCKER

iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; DOCKER &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; docker0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; DNAT &lt;span class=&quot;nt&quot;&gt;--to-destination&lt;/span&gt; 172.17.0.2:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-容器访问外部网络snat&quot;&gt;1.2. 容器访问外部网络(SNAT)&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 172.17.0.0/16 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; docker0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-网络参数修改&quot;&gt;2. 网络参数修改&lt;/h1&gt;

&lt;p&gt;可以根据实际情况在必要的时候进行相关配置。&lt;/p&gt;

&lt;h2 id=&quot;21-进程网络修改&quot;&gt;2.1. 进程网络修改&lt;/h2&gt;

&lt;p&gt;如果修改了进程的网络参数所有进程间的容器参数也会被修改。&lt;/p&gt;

&lt;p&gt;-b, –bridge=””	通过此参数可以自定义网桥设备，默认情况下docker会自动创建和使用docker0网桥设备。&lt;/p&gt;

&lt;p&gt;–bip 指定docker0的IP和掩码使用标准的CIDR形式:如 11.11.11.11/24。&lt;/p&gt;

&lt;p&gt;–dns 配置容器的DNS在启动docker进程是添加所有容器全部生效。&lt;/p&gt;

&lt;h2 id=&quot;22-容器网络修改&quot;&gt;2.2. 容器网络修改&lt;/h2&gt;

&lt;p&gt;容器网络修改只对当前容器生效。&lt;/p&gt;

&lt;p&gt;–dns 用于指定启动的容器的DNS&lt;/p&gt;

&lt;p&gt;–net 用于指定容器的网络通讯方式有以下四个值&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bridge：docker默认方式是网桥模式&lt;/li&gt;
  &lt;li&gt;none：容器没有网络栈&lt;/li&gt;
  &lt;li&gt;container：使用其它容器的网络栈docker容器会加入其它容器的network namespace&lt;/li&gt;
  &lt;li&gt;host：表示容器使用Host的网络没有自己独立的网络栈,容器可以完全访问Host的网络,安全性较低。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;23-暴露端口&quot;&gt;2.3 暴露端口&lt;/h2&gt;

&lt;p&gt;-p /P选项的使用格式&lt;/p&gt;

&lt;p&gt;-p :ContainerPort将制定的容器端口映射至主机所有地址的一个动态端口&lt;/p&gt;

&lt;p&gt;-p HostPort:ContainerPort映射至指定的主机端口&lt;/p&gt;

&lt;p&gt;-p IP:HostPort:ContainerPort映射至指定的主机IP的主机端口&lt;/p&gt;

&lt;p&gt;-p IP::ContainerPort映射至指定的主机的IP的动态端口&lt;/p&gt;

&lt;p&gt;-P :暴露所需要的所有端口(大P)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注:docker port ContainerName 可以查看容器当前的映射关系&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;24-自定义docker0网桥地址&quot;&gt;2.4. 自定义docker0网桥地址&lt;/h2&gt;

&lt;p&gt;修改/etc/docker/daemon.json文件&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.5/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fixed-cidr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.20.0.0/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fixed-cidr-v6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8::/64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mtu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1500&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;default-gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.20.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;default-gateway-v6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8:abcd::89&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.20.1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.20.1.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-网络隔离&quot;&gt;3. 网络隔离&lt;/h1&gt;

&lt;p&gt;常见的方式是通过网络名称空间进行隔离。&lt;/p&gt;

&lt;p&gt;docker network ls 查看当前可用的网络类型&lt;/p&gt;

&lt;p&gt;docker network create -d &lt;类型&gt; &lt;网络空间名称&gt;&lt;/网络空间名称&gt;&lt;/类型&gt;&lt;/p&gt;

&lt;p&gt;类型：&lt;/p&gt;

&lt;p&gt;docker network ls	查看当前可用的网络类型&lt;/p&gt;

&lt;p&gt;docker network create -d 类型 网络空间名称&lt;/p&gt;

&lt;h2 id=&quot;31-创建两个网桥&quot;&gt;3.1. 创建两个网桥&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network create &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; bridge lamp
docker network create &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; bridge lanp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;32-查看网络&quot;&gt;3.2. 查看网络&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;33-运行镜像&quot;&gt;3.3. 运行镜像&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 81:80  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nginx1 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lamp nginx
docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 82:80  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nginx2 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lanp nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;33-查看ip&quot;&gt;3.3. 查看IP&lt;/h2&gt;

&lt;p&gt;可以通过docker inspect命令进容器内查看Networks下面对应的Gateway参数就是刚则添加的两个网桥地址,此时两个容器之间无法进行通信但依旧可以连接外网。&lt;/p&gt;

&lt;h3 id=&quot;331-本机网桥&quot;&gt;3.3.1. 本机网桥&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;br-147dae318c84: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 172.20.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
        inet6 fe80::42:f5ff:fe68:325b  prefixlen 64  scopeid 0x20&amp;lt;&lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        ether 02:42:f5:68:32:5b  txqueuelen 0  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        RX packets 69  bytes 5749 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5.6 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 132  bytes 15927 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15.5 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

br-c14701e6b0f3: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 172.19.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
        inet6 fe80::42:3eff:fe34:c4c1  prefixlen 64  scopeid 0x20&amp;lt;&lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        ether 02:42:3e:34:c4:c1  txqueuelen 0  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        RX packets 76  bytes 14474 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14.1 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 153  bytes 14521 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14.1 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;332-nginx1容器ip&quot;&gt;3.3.2. nginx1容器IP&lt;/h3&gt;

&lt;p&gt;使用docker inspect nginx1 /bin/bash进行容器&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Networks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPAMConfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Aliases&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;21fb28ecbe99&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NetworkID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c14701e6b0f3a97e28c1a123ecc02d10e5fe59595053339e5b1ffa05b8f83a16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f3bb42a8709e20f2091672c27e162260b8c19d552e3b50915b7e3dae776d5fad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;172.19.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;172.19.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPPrefixLen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPv6Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GlobalIPv6Address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GlobalIPv6PrefixLen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:13:00:02&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;333-nginx2容器ip&quot;&gt;3.3.3. nginx2容器IP&lt;/h3&gt;

&lt;p&gt;使用docker inspect nginx2 /bin/bash进行容器&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Networks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lanp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPAMConfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Aliases&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ecd1c3320b78&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NetworkID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;147dae318c84a71430c239ec348e62b682b124d93bafe7c2b99d5ef611bdae3e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7f8f1abfff5df843447edbcf0f495181c276b08d97e752b09d5a6b2d883371de&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;172.20.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;172.20.0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPPrefixLen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IPv6Gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GlobalIPv6Address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;GlobalIPv6PrefixLen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;02:42:ac:14:00:02&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-linux桥接器进行主机间通讯&quot;&gt;4. Linux桥接器进行主机间通讯&lt;/h1&gt;

&lt;h2 id=&quot;41-通过配置文件修改&quot;&gt;4.1. 通过配置文件修改&lt;/h2&gt;

&lt;p&gt;1.复制ifcfg-ens33&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; etc/sysconfig/network-scripts/ifcfg-ens33 ifcfg-br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.编辑ens33如下&lt;/p&gt;

&lt;p&gt;删除IP相关的配置并添加一个BRIDGE=br0即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Ethernet
&lt;span class=&quot;nv&quot;&gt;PROXY_METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;span class=&quot;nv&quot;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;span class=&quot;nv&quot;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static
&lt;span class=&quot;nv&quot;&gt;DEFROUTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;span class=&quot;nv&quot;&gt;IPV6INIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;span class=&quot;nv&quot;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stable-privacy
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ens33
&lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3911e1b4-77c2-46bf-8e1d-c6f930688a70
&lt;span class=&quot;nv&quot;&gt;DEVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ens33
&lt;span class=&quot;nv&quot;&gt;ONBOOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRIDGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.编辑br0&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DEVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0
&lt;span class=&quot;nv&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Bridge  
&lt;span class=&quot;nv&quot;&gt;ONBOOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static 
&lt;span class=&quot;nv&quot;&gt;IPADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.80.139 
&lt;span class=&quot;nv&quot;&gt;NETMASK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;255.255.255.0 
&lt;span class=&quot;nv&quot;&gt;DNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.重启网络&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;这样ens33就没有地址br0就是一个可以正式工作的地址,但是docker并不能借助这个地址去通信。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;42-pipework&quot;&gt;4.2. pipework&lt;/h2&gt;

&lt;p&gt;Jérôme Petazzoni 编写了一个叫 pipework 的 shell 脚本，可以帮助用户在比较复杂的场景中完成容器的连接。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; git
git clone https://github.com/jpetazzo/pipework &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost network-scripts]
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;pipework/pipework /usr/local/bin/
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x /usr/local/bin
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nginx1  &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx &lt;span class=&quot;c&quot;&gt;#--net=none设置为空的目是为了让pip去指定&lt;/span&gt;
pipework br0 nginx1 192.168.80.135/24 &lt;span class=&quot;c&quot;&gt;#这个命令是不是永久生效的,需要加在开机脚里面&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 17 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/17/docker-network.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/17/docker-network.html</guid>
			</item>
		
			<item>
				<title>harbor安装</title>
				<description>&lt;h1 id=&quot;1-必备条件&quot;&gt;1. 必备条件&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Python应该是2.7或更高版本&lt;/li&gt;
  &lt;li&gt;Docker引擎应为1.10或更高版本&lt;/li&gt;
  &lt;li&gt;DockerCompose需要为1.6.0或更高版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-harbor安装&quot;&gt;2. harbor安装&lt;/h1&gt;
&lt;h2 id=&quot;21-官方地址&quot;&gt;2.1. 官方地址：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/vmware/harbor/releases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-修改harborcfg&quot;&gt;2.2. 修改harbor.cfg&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;hostname：目标的主机名或者完全限定域名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ui_url_protocol：http或https。默认为http&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;db_password：用于db_auth的MySQL数据库的根密码。更改此密码进行任何生产用途&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;max_job_workers：（默认值为3）允许工作人员同步到远程目标,增加此数字允许系统中更多的并发复制作业。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;customize_crt：（on或off。默认为on）当此属性打开时prepare脚本将为注册表的令牌的生成/验证创
建私钥和根证书&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ssl_cert：SSL证书的路径，仅当协议设置为https时才应用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ssl_cert_key：SSL密钥的路径，仅当协议设置为https时才应用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;secretkey_path：用于在复制策略中加密或解密远程注册表的密码的密钥路径&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-安装步骤&quot;&gt;3. 安装步骤&lt;/h1&gt;

&lt;h2 id=&quot;31-创建https证书以及配置相关目录权限&quot;&gt;3.1 创建https证书以及配置相关目录权限&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;openssl genrsa -des3 -out server.key 2048 #生成2048位的私钥&lt;/li&gt;
  &lt;li&gt;openssl req -new -key server.key -out server.csr #生成证书&lt;/li&gt;
  &lt;li&gt;cp server.key server.key.org #备份私钥&lt;/li&gt;
  &lt;li&gt;openssl rsa -in server.key.org -out server.key #退密钥保证nginx使用&lt;/li&gt;
  &lt;li&gt;openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt&lt;/li&gt;
  &lt;li&gt;mkdir -p /data/cert&lt;/li&gt;
  &lt;li&gt;mv server.* /data/cert&lt;/li&gt;
  &lt;li&gt;chmod -R 777 /data/cert #说明&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-复制harbor&quot;&gt;3.2 复制harbor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;直接使用xftp上传到/usr/local/目录中&lt;/li&gt;
  &lt;li&gt;解压tar -zxvf harbor-offline-installer-&lt;version&gt;.tgz&lt;/version&gt;&lt;/li&gt;
  &lt;li&gt;进入/usr/local/harbor&lt;/li&gt;
  &lt;li&gt;修改harbor.cfg相关参数&lt;/li&gt;
  &lt;li&gt;执行./install.sh&lt;/li&gt;
  &lt;li&gt;执行完成后显示Harbor has been installed and started successfully表示成功&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Creating network &lt;span class=&quot;s2&quot;&gt;&quot;harbor_harbor&quot;&lt;/span&gt; with the default driver
Creating harbor-log ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-adminserver ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-db          ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating registry           ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-ui          ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating harbor-jobservice  ... &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Creating nginx              ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

✔ &lt;span class=&quot;nt&quot;&gt;----Harbor&lt;/span&gt; has been installed and started successfully.----

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;harbor访问测试&quot;&gt;harbor访问测试&lt;/h2&gt;

&lt;p&gt;地址:hub.somoiot.com&lt;/p&gt;

&lt;p&gt;默认管理员用户名:admin&lt;/p&gt;

&lt;p&gt;默认管理员密码:Harbor12345&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;访问地址为harbor.cfg文件中的hostname所设置的内容&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;34-harbor容器测试&quot;&gt;3.4 harbor容器测试&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过以上命令如果出现如下结果表示harbor正常&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                    PORTS                                                              NAMES
f7bbedc5fff6        vmware/nginx-photon:1.11.13        &lt;span class=&quot;s2&quot;&gt;&quot;nginx -g 'daemon ...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:4443-&amp;gt;4443/tcp   nginx
e0ec964c19bd        vmware/harbor-jobservice:v1.2.0    &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_jo...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes                                                                                 harbor-jobservice
6c2492697c89        vmware/harbor-ui:v1.2.0            &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_ui&quot;&lt;/span&gt;      5 minutes ago       Up 5 minutes                                                                                 harbor-ui
80eb4ab639ec        vmware/registry:2.6.2-photon       &lt;span class=&quot;s2&quot;&gt;&quot;/entrypoint.sh se...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              5000/tcp                                                           registry
edd9febe0a9c        vmware/harbor-db:v1.2.0            &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              3306/tcp                                                           harbor-db
a32c62e85ecf        vmware/harbor-adminserver:v1.2.0   &lt;span class=&quot;s2&quot;&gt;&quot;/harbor/harbor_ad...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes                                                                                 harbor-adminserver
e3f991179e33        vmware/harbor-log:v1.2.0           &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh -c 'crond...&quot;&lt;/span&gt;   5 minutes ago       Up 5 minutes              127.0.0.1:1514-&amp;gt;514/tcp                                            harbor-log

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4-使用&quot;&gt;4. 使用&lt;/h1&gt;

&lt;h2 id=&quot;41-服务端&quot;&gt;4.1. 服务端&lt;/h2&gt;

&lt;h3 id=&quot;411-指定镜像仓库地址&quot;&gt;4.1.1. 指定镜像仓库地址&lt;/h3&gt;

&lt;p&gt;添加/etc/docker/daemon.json配置以便于docker认证通过&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;412-下载测试镜像&quot;&gt;4.1.2. 下载测试镜像&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;413-给镜像重新打标签&quot;&gt;4.1.3. 给镜像重新打标签&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockertag hello-world serverip/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;414-登录进行上传&quot;&gt;4.1.4. 登录进行上传&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockerlogin serverip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;42-docker客户端&quot;&gt;4.2. docker客户端&lt;/h2&gt;

&lt;h3 id=&quot;421-指定镜像仓库地址&quot;&gt;4.2.1. 指定镜像仓库地址&lt;/h3&gt;

&lt;p&gt;添加/etc/docker/daemon.json配置以便于docker认证通过&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;422-下载测试镜像&quot;&gt;4.2.2. 下载测试镜像&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull ip/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意:以上环境如果没有DNS解析服务必须要在/etc/hosts文件中添加一行解析记录&lt;/strong&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 16 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/16/harbor-install.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/16/harbor-install.html</guid>
			</item>
		
			<item>
				<title>docker容器管理</title>
				<description>&lt;h1 id=&quot;基本概念&quot;&gt;基本概念&lt;/h1&gt;

&lt;p&gt;Docker 包括三个基本概念:镜像（Image）、容器（Container）、仓库（Repository）理解了这三个概念，就理解了 Docker 的整个生命周期。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Docker 镜像（Image）是模板类似于生活中楼房的图纸建筑工人根据图纸建造楼房同时也和程序中类（class）相似，程序员可以通过类（class）创建相关实例。&lt;/li&gt;
  &lt;li&gt;Docker 容器（Container）是镜像创建并运行的实例，可以当作为一个迷你的Linux系统和运行的相关应用程序。&lt;/li&gt;
  &lt;li&gt;Docker 仓库（Repository）是存放镜像文件的地方，类似于程序中的对象创建工厂和IOC容器（可能比喻不是特别恰当）及git。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;基础命令&quot;&gt;基础命令&lt;/h1&gt;

&lt;p&gt;命令是运维人员与docker交互的入口,命令除了单条使用外，还支持赋值、解析变量、嵌套使用。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;序号&lt;/th&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;docker info&lt;/td&gt;
      &lt;td&gt;守护进程的系统资源设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;docker search&lt;/td&gt;
      &lt;td&gt;仓库的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;docker pull&lt;/td&gt;
      &lt;td&gt;仓库的下载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;docker images&lt;/td&gt;
      &lt;td&gt;镜像的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;docker rmi&lt;/td&gt;
      &lt;td&gt;镜像的删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;docker ps&lt;/td&gt;
      &lt;td&gt;容器的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;docker run&lt;/td&gt;
      &lt;td&gt;容器的查询&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;docker start&lt;/td&gt;
      &lt;td&gt;容器启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;docker stop&lt;/td&gt;
      &lt;td&gt;容器停止&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;单个容器管理&quot;&gt;单个容器管理&lt;/h1&gt;
&lt;p&gt;每个容器被创建后都会分配一个ID作为容器的唯一标示后续对容器的启动、停止、修改、删除等所有操作都是通过ID来完成类似数据库概念中的主键。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;序号&lt;/th&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;docker ps –no-trunc&lt;/td&gt;
      &lt;td&gt;查看&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;docker stop/start CONTAINERID&lt;/td&gt;
      &lt;td&gt;停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;docker start/stop webapp&lt;/td&gt;
      &lt;td&gt;通过容器别名启动/停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;docker inspect webapp&lt;/td&gt;
      &lt;td&gt;通过容器别名启动/停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;docker logs webapp&lt;/td&gt;
      &lt;td&gt;查看容器日志&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;docker stats webapp&lt;/td&gt;
      &lt;td&gt;查看容器所占用的系统资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;docker exec 容器名 容器内执行的命令&lt;/td&gt;
      &lt;td&gt;容器执行命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;docker exec -it 容器名 /bin/bash&lt;/td&gt;
      &lt;td&gt;登入容器的bash&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;–restart=always&lt;/td&gt;
      &lt;td&gt;容器的自动启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;-h x.xx.xx&lt;/td&gt;
      &lt;td&gt;设置容器主机名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;–dns xx.xx.xx.xx&lt;/td&gt;
      &lt;td&gt;设置容器使用的 DNS 服务器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;–dns-search&lt;/td&gt;
      &lt;td&gt;DNS 搜索设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;–add-host hostname:IP&lt;/td&gt;
      &lt;td&gt;注入 hostname &amp;lt;&amp;gt; IP 解析&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;–rm&lt;/td&gt;
      &lt;td&gt;服务停止时自动删除&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
				<pubDate>Mon, 15 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/15/docker-manager.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/15/docker-manager.html</guid>
			</item>
		
			<item>
				<title>docker compose安装</title>
				<description>&lt;h1 id=&quot;docker-compose简介&quot;&gt;docker-compose简介&lt;/h1&gt;

&lt;p&gt;Docker Compose是Docker官方编排项目之一，负责快速在集群中部署分布式应用。&lt;/p&gt;

&lt;p&gt;Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。&lt;/p&gt;

&lt;p&gt;Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。&lt;/p&gt;

&lt;p&gt;一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。&lt;/p&gt;

&lt;p&gt;一个服务当中可包括多个容器实例Docker-Compose并没有解决负载均衡的问题因此需要借助其它工具实现服务发现及负载均衡。&lt;/p&gt;

&lt;p&gt;Docker-Compose的配置文件默认为docker-compose.yml可通过环境变量COMPOSE_FILE或-f参数自定义配置文件，如果定义了多个有依赖关系的服务及每个服务运行的容器。&lt;/p&gt;

&lt;h1 id=&quot;docker-compose安装&quot;&gt;docker-compose安装&lt;/h1&gt;
&lt;p&gt;下载地址：https://github.com/docker/compose/releases&lt;/p&gt;

&lt;p&gt;安装方法：移动是/usr/local/bin/目录下并赋于chmod a+x权限即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;docker-commpose /usr/local/bin/
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;检查版本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-compose用法&quot;&gt;docker-compose用法&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;-f 指定yml文件位置&lt;/li&gt;
  &lt;li&gt;ps 显示所有容器信息&lt;/li&gt;
  &lt;li&gt;restart 重启容器&lt;/li&gt;
  &lt;li&gt;logs 查看日志&lt;/li&gt;
  &lt;li&gt;config -q 验证yml文件是否正确&lt;/li&gt;
  &lt;li&gt;stop 停止容器&lt;/li&gt;
  &lt;li&gt;start 启动容器&lt;/li&gt;
  &lt;li&gt;up -d 启动容器项目&lt;/li&gt;
  &lt;li&gt;pause 暂停容器&lt;/li&gt;
  &lt;li&gt;unpause 恢复暂停&lt;/li&gt;
  &lt;li&gt;rm 删除容器&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Sun, 14 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/14/docker-compose.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/14/docker-compose.html</guid>
			</item>
		
			<item>
				<title>docker加速</title>
				<description>&lt;blockquote&gt;
  &lt;p&gt;由于docker镜像在国外导致国内pull相关镜像速度实在有点受不了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前采用阿里云的&lt;strong&gt;容器镜像加速&lt;/strong&gt;进行加速，方法很简单就是添加/etc/docker/daemon.json文件即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/docker
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/docker/daemon.json &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;'
{
  &quot;registry-mirrors&quot;: [&quot;https://yj8o3p4r.mirror.aliyuncs.com&quot;]
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参考文档地址：https://help.aliyun.com/document_detail/60750.html&lt;/p&gt;
</description>
				<pubDate>Sat, 13 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/13/docker-deamon.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/13/docker-deamon.html</guid>
			</item>
		
			<item>
				<title>docker安装</title>
				<description>&lt;p&gt;基于Linux的docker的安装方法&lt;/p&gt;
&lt;h1 id=&quot;1-脚本安装&quot;&gt;1. 脚本安装&lt;/h1&gt;
&lt;p&gt;直接使用官方给的安装脚本进行安装，脚本装安装最新版本docker容器，在生产环境中不建议使用此方法因为最新版可能存在一些bug导致一些异常问题。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-yum安装&quot;&gt;2. yum安装&lt;/h1&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/etc/yum.repos.d/docker.repo &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[dockerrepo]
name=Docker Repository 
baseurl=https://yum.dockerproject.org/repo/main/centos/7 
enabled=1
gpgcheck=1 
gpgkey=https://yum.dockerproject.org/gpg EOF 
yum install docker
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-rpm安装推荐&quot;&gt;3. rpm安装（推荐）&lt;/h1&gt;
&lt;h2 id=&quot;31-下载地址&quot;&gt;3.1. 下载地址:&lt;/h2&gt;

&lt;p&gt;https://download.docker.com/linux/centos/7/x86_64/stable/Packages/&lt;/p&gt;

&lt;h2 id=&quot;32-步骤&quot;&gt;3.2. 步骤:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;下载docker-ce-17.03.0.ce-1.el7.centos.x86_64.rpm文件&lt;/li&gt;
  &lt;li&gt;下载docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch.rpm文件&lt;/li&gt;
  &lt;li&gt;在root下创建docker目录&lt;/li&gt;
  &lt;li&gt;移动(mv docker* docker)以上两个文件到docker目录&lt;/li&gt;
  &lt;li&gt;进入docker(cd docker)目录执行yum -y install *命令&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;33-docker测试&quot;&gt;3.3. docker测试&lt;/h2&gt;

&lt;p&gt;执行下面命令&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start docker 
systemctl status docker 
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker
docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;34-防火墙设置可选&quot;&gt;3.4. 防火墙设置（可选）&lt;/h2&gt;

&lt;p&gt;因为docker会利用防火墙进行一些设置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld &lt;span class=&quot;c&quot;&gt;#关闭防火墙&lt;/span&gt;
systemctl disable firewalld &lt;span class=&quot;c&quot;&gt;#禁用开机自启&lt;/span&gt;
getenforce &lt;span class=&quot;c&quot;&gt;#查看selinux是否为Disabled&lt;/span&gt;
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;iptables-services
systemctl start iptables &lt;span class=&quot;c&quot;&gt;#启动&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;iptables &lt;span class=&quot;c&quot;&gt;#启用开机自启&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#清空规则&lt;/span&gt;
service iptables save &lt;span class=&quot;c&quot;&gt;#保存&lt;/span&gt;
yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Fri, 12 Feb 2021 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/12/docker-install.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/docker/2021/02/12/docker-install.html</guid>
			</item>
		
			<item>
				<title>firewalld常用命令</title>
				<description>&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;查看是否开启
systemctl status firewalld.service&lt;/li&gt;
  &lt;li&gt;打开防火墙
systemctl start firewalld.service&lt;/li&gt;
  &lt;li&gt;停用防火墙
systemctl disable firewalld&lt;/li&gt;
  &lt;li&gt;禁用防火墙
systemctl stop firewalld.service&lt;/li&gt;
  &lt;li&gt;开机启动
systemctl enable firewalld&lt;/li&gt;
  &lt;li&gt;取消开机启动
systemctl disable firewalld&lt;/li&gt;
  &lt;li&gt;查看运行状态
firewall-cmd –state&lt;/li&gt;
  &lt;li&gt;查看接口信息
firewall-cmd –list-all&lt;/li&gt;
  &lt;li&gt;更新防火墙规则方法1:无需断开连接，动态更改规则
firewall-cmd –reload&lt;/li&gt;
  &lt;li&gt;更新防火墙规则方法2:断开连接，以重启的方式更改规则
firewall-cmd –complete-reload&lt;/li&gt;
  &lt;li&gt;查看帮助
firewall-cmd –help
–zone=NAME # 指定 Zone
–permanent # 为永久生效
–timeout=seconds # 持续一段时间，到期后自动移除，经常用于调试，且不能与 –permanent 同时使用&lt;/li&gt;
  &lt;li&gt;追加一个8181端口，永久有效
firewall-cmd –add-port=8181/tcp –permanent&lt;/li&gt;
  &lt;li&gt;追加一段端口范围
firewall-cmd –add-port=6000-6600/tcp&lt;/li&gt;
  &lt;li&gt;开放 ftp 服务
firewall-cmd –add-service=ftp&lt;/li&gt;
  &lt;li&gt;添加eth0 接口至 public 信任等级，永久有效
firewall-cmd –zone=public –add-interface=eth0 –permanent&lt;/li&gt;
  &lt;li&gt;配置 public zone 的端口转发
firewall-cmd –zone=public –add-masquerade&lt;/li&gt;
  &lt;li&gt;然后转发 tcp 22 端口至 9527
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toport=9527&lt;/li&gt;
  &lt;li&gt;转发 22 端口数据至另一个 ip 的相同端口上
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toaddr=192.168.1.123&lt;/li&gt;
  &lt;li&gt;转发 22 端口数据至另一 ip 的 9527 端口上
firewall-cmd –zone=public –add-forward-port=port=22:proto=tcp:toport=9527:toaddr=192.168.1.100&lt;/li&gt;
  &lt;li&gt;IP 封禁
firewall-cmd –permanent –add-rich-rule=”rule family=’ipv4’ source address=’192.168.1.123’ reject”&lt;/li&gt;
  &lt;li&gt;通过 ipset 来封禁 ip
firewall-cmd –permanent –zone=public –new-ipset=blacklist –type=hash:ip
firewall-cmd –permanent –zone=public –ipset=blacklist –add-entry=192.168.1.123&lt;/li&gt;
  &lt;li&gt;封禁网段
firewall-cmd –permanent –zone=public –new-ipset=blacklist –type=hash:net
firewall-cmd –permanent –zone=public –ipset=blacklist –add-entry=192.168.1.0/24&lt;/li&gt;
  &lt;li&gt;倒入 ipset 规则 blacklist，然后封禁 blacklist
firewall-cmd –permanent –zone=public –new-ipset-from-file=/path/blacklist.xml
firewall-cmd –permanent –zone=public –add-rich-rule=’rule source ipset=blacklist drop’&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 20 Dec 2020 22:00:00 +0800</pubDate>
				<link>struggle3.github.io/blog.github.io/blog.github.io/linux/2020/12/20/firewalld.html</link>
				<guid isPermaLink="true">struggle3.github.io/blog.github.io/blog.github.io/linux/2020/12/20/firewalld.html</guid>
			</item>
		
	</channel>
</rss>
